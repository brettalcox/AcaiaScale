"""
A class that implements encoding and decoding of Acaia BLE packets

CREDIT: Based on Bobby Powers's js implementation at https://github.com/bpowers/btscale
"""

__author__    = "David Hulton"
__license__   = "BSD"
__copyright__ = "Copyright 2016, David Hulton"

class Encode():
    def __init__(self):
        self._max_payload_length = 10
        self._magic1 = 0xdf
        self._magic2 = 0x78
        self._table1 = [
            0x00, 0x76, 0x84, 0x50, 0xDB, 0xE4, 0x6F, 0xB2,
            0xFA, 0xFB, 0x4D, 0x4F, 0x8E, 0x57, 0x8C, 0x5F,
            0x9E, 0xAE, 0xB0, 0xB5, 0x5D, 0x96, 0x15, 0xB9,
            0x0F, 0xFC, 0xFD, 0x70, 0x1B, 0x80, 0xBB, 0xF4,
            0x93, 0xFE, 0xFF, 0x69, 0x68, 0x83, 0xCF, 0xA7,
            0xD2, 0xEB, 0x3C, 0x64, 0x41, 0x77, 0xC6, 0x86,
            0xCB, 0xD3, 0xDD, 0x48, 0xEE, 0xF0, 0x1E, 0x58,
            0x4C, 0x8A, 0x8F, 0xA4, 0x02, 0x4B, 0x06, 0x24,
            0x8D, 0xB7, 0xBF, 0x28, 0x63, 0xAD, 0xB8, 0x56,
            0x89, 0xA0, 0xC4, 0x51, 0xC5, 0x52, 0x27, 0x3D,
            0xC9, 0xD6, 0xDC, 0x42, 0x2C, 0xD7, 0xE6, 0xEF,
            0xF9, 0x35, 0xD9, 0xBC, 0x7A, 0x1F, 0x43, 0x6C,
            0x36, 0x38, 0x07, 0x94, 0x98, 0xD8, 0xE3, 0xB6,
            0x53, 0x3F, 0x0C, 0x92, 0x9A, 0xC2, 0xD1, 0xD5,
            0x34, 0x1D, 0x62, 0xA9, 0x20, 0x7E, 0xAC, 0x09,
            0x5E, 0x59, 0x31, 0x9C, 0xA3, 0x97, 0xB3, 0x74,
            0xC1, 0xED, 0xF2, 0x10, 0x2E, 0x4A, 0xE1, 0x23,
            0x2B, 0x81, 0xF7, 0x61, 0x19, 0x08, 0x1A, 0x39,
            0x65, 0x3E, 0x73, 0x3B, 0x7B, 0x0B, 0x67, 0x04,
            0x6A, 0x22, 0x46, 0x0E, 0x55, 0x66, 0x54, 0x01,
            0x45, 0x6B, 0x32, 0x8B, 0xAB, 0x18, 0xBA, 0xCC,
            0xD4, 0x26, 0xE2, 0xE7, 0x1C, 0x44, 0x14, 0x95,
            0x99, 0x85, 0xDA, 0x4E, 0x6E, 0xE0, 0xE8, 0x37,
            0xBE, 0xF3, 0x7F, 0xDF, 0xF6, 0xF8, 0x2D, 0x30,
            0x21, 0x13, 0x17, 0x0D, 0x16, 0x25, 0x5B, 0x33,
            0x11, 0x5C, 0x7C, 0x87, 0xA1, 0xBD, 0x05, 0x90,
            0x9F, 0xA6, 0x6D, 0xB4, 0xC7, 0xCA, 0xC3, 0x12,
            0x03, 0xE5, 0xDE, 0xE9, 0x9B, 0x88, 0x2F, 0xEA,
            0xEC, 0xC8, 0x29, 0x71, 0x49, 0x5A, 0x72, 0x47,
            0x7D, 0xA2, 0xA5, 0x91, 0xAF, 0xB1, 0x0A, 0xCD,
            0x60, 0xC0, 0x9D, 0x78, 0xCE, 0xD0, 0x79, 0x3A,
            0xAA, 0xA8, 0x2A, 0x40, 0xF1, 0x75, 0xF5, 0x82,
        ]
        self._table2 = [
            0x00, 0x9F, 0x3C, 0xD8, 0x97, 0xCE, 0x3E, 0x62,
            0x8D, 0x77, 0xEE, 0x95, 0x6A, 0xC3, 0x9B, 0x18,
            0x83, 0xC8, 0xD7, 0xC1, 0xAE, 0x16, 0xC4, 0xC2,
            0xA5, 0x8C, 0x8E, 0x1C, 0xAC, 0x71, 0x36, 0x5D,
            0x74, 0xC0, 0x99, 0x87, 0x3F, 0xC5, 0xA9, 0x4E,
            0x43, 0xE2, 0xFA, 0x88, 0x54, 0xBE, 0x84, 0xDE,
            0xBF, 0x7A, 0xA2, 0xC7, 0x70, 0x59, 0x60, 0xB7,
            0x61, 0x8F, 0xF7, 0x93, 0x2A, 0x4F, 0x91, 0x69,
            0xFB, 0x2C, 0x53, 0x5E, 0xAD, 0xA0, 0x9A, 0xE7,
            0x33, 0xE4, 0x85, 0x3D, 0x38, 0x0A, 0xB3, 0x0B,
            0x03, 0x4B, 0x4D, 0x68, 0x9E, 0x9C, 0x47, 0x0D,
            0x37, 0x79, 0xE5, 0xC6, 0xC9, 0x14, 0x78, 0x0F,
            0xF0, 0x8B, 0x72, 0x44, 0x2B, 0x90, 0x9D, 0x96,
            0x24, 0x23, 0x98, 0xA1, 0x5F, 0xD2, 0xB4, 0x06,
            0x1B, 0xE3, 0xE6, 0x92, 0x7F, 0xFD, 0x01, 0x2D,
            0xF3, 0xF6, 0x5C, 0x94, 0xCA, 0xE8, 0x75, 0xBA,
            0x1D, 0x89, 0xFF, 0x25, 0x02, 0xB1, 0x2F, 0xCB,
            0xDD, 0x48, 0x39, 0xA3, 0x0E, 0x40, 0x0C, 0x3A,
            0xCF, 0xEB, 0x6B, 0x20, 0x63, 0xAF, 0x15, 0x7D,
            0x64, 0xB0, 0x6C, 0xDC, 0x7B, 0xF2, 0x10, 0xD0,
            0x49, 0xCC, 0xE9, 0x7C, 0x3B, 0xEA, 0xD1, 0x27,
            0xF9, 0x73, 0xF8, 0xA4, 0x76, 0x45, 0x11, 0xEC,
            0x12, 0xED, 0x07, 0x7E, 0xD3, 0x13, 0x67, 0x41,
            0x46, 0x17, 0xA6, 0x1E, 0x5B, 0xCD, 0xB8, 0x42,
            0xF1, 0x80, 0x6D, 0xD6, 0x4A, 0x4C, 0x2E, 0xD4,
            0xE1, 0x50, 0xD5, 0x30, 0xA7, 0xEF, 0xF4, 0x26,
            0xF5, 0x6E, 0x28, 0x31, 0xA8, 0x6F, 0x51, 0x55,
            0x65, 0x5A, 0xB2, 0x04, 0x52, 0x32, 0xDA, 0xBB,
            0xB5, 0x86, 0xAA, 0x66, 0x05, 0xD9, 0x56, 0xAB,
            0xB6, 0xDB, 0xDF, 0x29, 0xE0, 0x81, 0x34, 0x57,
            0x35, 0xFC, 0x82, 0xB9, 0x1F, 0xFE, 0xBC, 0x8A,
            0xBD, 0x58, 0x08, 0x09, 0x19, 0x1A, 0x21, 0x22,
        ]
        self._sequenceId = 0

    def decode(self, data):
        if len(data) == 0:
            raise NoData()

        if data[0] != self._magic1 or data[1] != self._magic2:
            raise BadMagic()

        self._len1 = data[2]
        self._cs   = self._checksum(data[3:-1])

        if data[-1] != self._cs:
            raise BadChecksum()

        self._msgType = data[3]
        self._sequenceId = data[4]
        self._id = data[5]
        self._len2 = data[6]

        if self._len1 != len(data) - 3:
            raise BadLen1()

        if self._len2 != len(data) - 8:
            raise BadLen2()

        self._payload = self._decipher(data[7:], self._sequenceId)

    def encode(self, msgType, msgId, payload):
        if len(payload) > self._max_payload_length:
            raise PayloadTooLong()
        buf = bytearray(8 + len(payload))
        sequenceId = self._nextSequenceId()
        buf[0] = self._magic1
        buf[1] = self._magic2
        buf[2] = 5 + len(payload)
        buf[3] = msgType
        buf[4] = sequenceId
        buf[5] = msgId
        buf[6] = len(payload) & 0xff
        buf = self._encipher(buf[0:7], payload, sequenceId)
        buf.append(self._checksum(buf[3:]))
        return buf

    def _nextSequenceId(self):
        nextId = self._sequenceId
        self._sequenceId += 1
        self._sequenceId &= 0xff
        return nextId

    def _checksum(self, data):
        sum = 0
        for byte in data:
            sum = sum + byte
        return sum & 0xff

    def _encipher(self, data_out, data_in, sequenceId):
        i = 0
        result = data_out
        for byte in data_in:
            result.append(self._table1[(byte + sequenceId) & 0xff])
            i += 1
        return result

    def _decipher(self, data, sequenceId):
        result = []
        for byte in data:
            result.append((self._table2[byte & 0xff] - sequenceId) & 0xff)
        return result

